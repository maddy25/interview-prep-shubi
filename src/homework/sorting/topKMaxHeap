//Build MAX heap and implement Top K

var arr = [];  var sortedArr = [];

var insertElement = (el) => { 
  let i = 0;
  arr.push(el);
  heapifyUp();
  
}; 

var heapifyUp = () => {
  let i = arr.length-1;
 // console.log(arr)
  while (i>0) {
      if (arr[(i-1)/2] !== undefined) {
        if(arr[i]>arr[(i-1)/2]) {
          swap (arr,i,(i-1)/2);
        }
      } else if (arr[(i-2)/2] !== undefined) {
          if(arr[i]>arr[(i-2)/2]) {
            swap (arr,i,(i-2)/2);
          } 
        } 
    i--;
  }
  console.log("input stream Heapified", arr)

};
var swap =(arr,i,j)=>{
  let temp = arr[i];
  arr[i] = arr[j];
  arr[j] = temp;
};

var removeMax = (k)=> {
  const set = new Set();
  for (var j=arr.length;j>0;j--) {
    var temp= arr[0];
    arr[0] = arr[arr.length-1];
    arr.pop();
    heapifyDown();
  //console.log("After removing Min",arr)
    //sortedArr.push(temp);
    //arr.push(temp)
    set.add(temp)
    //arr.push(temp)
    
  } 
  
  console.log("sorted",set,arr)

  set.forEach(v => arr.push(v));
  var opAr = [];
  for(let x=0;x<k;x++) {
    opAr.push(arr[x])
  }
console.log(opAr)
  
}
var heapifyDown = ()=>{
  let i = 0;
  while(i<arr.length) {
    if(arr[(2*i+1)/2]!==undefined) {
        if(arr[i]<arr[(2*i+1)/2]) {
            swap (arr,i,(2*i+1)/2);
            heapifyDown();
        }
    }
    if (arr[(2*i+2)/2]!==undefined) {
      if(arr[i]<arr[(2*i+2)/2]) {
            swap (arr,i,(2*i+2)/2);
            heapifyDown();
        }
    }
    i++;
  };

}
insertElement(6);
insertElement(2);
insertElement(1);
insertElement(10);
insertElement(10);

removeMax(2);
